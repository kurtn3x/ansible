import os
from pathlib import Path
import environ

DEBUG = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
APPEND_SLASH = True

AUTH_USER_MODEL = "authentication.User"
ROOT_URLCONF = "kurtn3x_api.urls"

# PASSWORDS
env = environ.Env()
environ.Env.read_env()
SECRET_KEY = env("SECRET_KEY")
DB_PASSWORD = env("DB_PASSWORD")
FERNET_KEY = env("FERNET_KEY").encode("utf-8")

# MEDIA
MEDIA_URL = "/media/"
PRIVATE_STORAGE_ROOT = "/var/www/kurtn3x.xyz/private-media"
MEDIA_ROOT = "/var/www/kurtn3x.xyz/media"
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1500
DATA_UPLOAD_MAX_NUMBER_FILES = 350
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o750
FILE_UPLOAD_PERMISSIONS = 0o640
FILE_MAX_PATH_LEN = 255

# VPN
SERVER_IP_ADDRESS = "{{ ansible_host }}"
VPN_IPV4_NETWORK = "{{ wireguard_ipv4_network }}"
VPN_IPV6_NETWORK = "{{ wireguard_ipv6_network }}"
VPN_DNS_SERVER_IPV4 = "{{ wireguard_server_ipv4 | split('/') | first }}"
VPN_DNS_SERVER_IPV6 = "{{ wireguard_server_ipv6 | split('/') | first }}"
VPN_PSK_SAVE_PATH = "{{ wireguard_psk_save_path }}"
VPN_SERVER_PUBLIC_KEY = "{{ wireguard_server_public_key }}"

# CORS & CSRF
ALLOWED_HOSTS = [".kurtn3x.xyz"]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "https://api.kurtn3x.xyz",
    "https://www.kurtn3x.xyz",
]
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "sessionid",
]

SESSION_COOKIE_SECURE = True
SESSION_COOKIE_SAMESITE = "Strict"
CSRF_COOKIE_SAMESITE = "Strict"
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_DOMAIN = ".kurtn3x.xyz"
CSRF_TRUSTED_ORIGINS = [
    "https://*.kurtn3x.xyz",
]

# AXES
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = 0.5
AXES_RESET_ON_SUCCESS = True
AXES_CACHE = "axes_cache"
AXES_DISABLE_ACCESS_LOG = True
AXES_LOCKOUT_PARAMETERS = ["ip_address"]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# STATIC FILES
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CACHE (FOR CAPTCHA)
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "captcha_cache",
    },
    "axes_cache": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "axes_cache",
    },
}

# DATABASE
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "kurtn3x",
        "USER": "kurtn3x",
        "PASSWORD": DB_PASSWORD,
        "HOST": "127.0.0.1",
        "PORT": "5432",
    }
}

# REST STUFF
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        # If you use MultiPartFormParser or FormParser, we also have a camel case version
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
        # Any other parsers
    ),
}

AUTHENTICATION_BACKENDS = [
    "axes.backends.AxesStandaloneBackend",
    "django.contrib.auth.backends.ModelBackend",
]

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "rest_framework",
    "authentication",
    "user_profile",
    "files",
    "vpn",
    "axes",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "axes.middleware.AxesMiddleware",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "kurtn3x_api.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
