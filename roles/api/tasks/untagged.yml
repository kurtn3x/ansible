---
- name: Install dependencies
  ansible.builtin.apt:
    update_cache: true
    name:
      - postgresql
      - postgresql-contrib
      - git
      - python3.11
      - python3.11-venv
      - python3-dev
      - libpq-dev
      - curl

- name: Create private-media directory
  ansible.builtin.file:
    path: "{{ web_root }}/private-media"
    state: directory
    owner: "{{ ansible_web_user }}"
    group: www-data
    mode: "0750"

- name: Create media directory
  ansible.builtin.file:
    path: "{{ web_root }}/media"
    state: directory
    owner: "{{ ansible_web_user }}"
    group: www-data
    mode: "0755"

- name: Create wireguard psk folder
  ansible.builtin.file:
    path: "{{ wireguard_psk_save_path }}"
    state: directory
    recurse: true
    owner: "{{ ansible_web_user }}"
    group: nogroup
    mode: "0700"

- name: Check if git repo has changes
  ansible.builtin.git:
    repo: "{{ api_source.source }}"
    dest: "{{ web_root }}/{{ api_source.server_dest }}"
    clone: false
    update: false
    version: main
  register: git_info
  become: true
  become_user: "{{ ansible_web_user }}"

- name: Clone api repository with git
  ansible.builtin.git:
    repo: "{{ api_source.source }}"
    dest: "{{ web_root }}/{{ api_source.server_dest }}"
    force: true
    version: main
  become: true
  become_user: "{{ ansible_web_user }}"
  when: git_info.after != git_info.before

- name: Set permissions for api folder
  ansible.builtin.file:
    path: "{{ web_root }}/{{ api_source.server_dest }}"
    state: directory
    owner: "{{ ansible_web_user }}"
    recurse: true
    group: nogroup
    mode: u=rwX,g=,o=
    follow: false

- name: Install Python Modules
  become: true
  become_user: "{{ ansible_web_user }}"
  ansible.builtin.pip:
    virtualenv: "{{ web_root }}/{{ api_source.server_dest }}/.venv"
    virtualenv_command: "python3.11 -m venv"
    name:
      - django
      - django-axes
      - django-cors-headers
      - django-environ
      - django-ipware
      - djangorestframework
      - gunicorn
      - importlib-metadata
      - pillow
      - pathvalidate
      - psycopg2-binary
      - pytz
      - six
      - sqlparse
      - zipp
      - typing-extensions
      - captcha

- name: Get wireguard public-key for django-settings
  ansible.builtin.command: "cat /etc/wireguard/public.key"
  changed_when: false
  register: public_key

- name: Set wireguard public key variable for django-settings
  ansible.builtin.set_fact:
    wireguard_server_public_key: "{{  public_key.stdout }}"

- name: Generate settings.py from template
  ansible.builtin.template:
    src: templates/settings.py.j2
    dest: "{{ web_root }}/{{ api_source.server_dest }}/kurtn3x_api/settings.py"
    owner: kurtn3x
    group: nogroup
    mode: "0700"

- name: Generate .env-file from template
  ansible.builtin.template:
    src: templates/.env.j2
    dest: "{{ web_root }}/{{ api_source.server_dest }}/kurtn3x_api/.env"
    owner: kurtn3x
    group: nogroup
    mode: "0600"

- name: Create temporary venv for postgres commands
  become: true
  become_user: postgres
  ansible.builtin.pip:
    virtualenv: "/tmp/.venv"
    virtualenv_command: "python3.11 -m venv"
    name:
      - psycopg2-binary

- name: Set temporary python interpreter for postgres commands
  ansible.builtin.set_fact:
    ansible_python_interpreter: "/tmp/.venv/bin/python"

- name: Postgresql commands
  become: true
  become_user: postgres
  block:
    - name: Postgresql - Create user
      community.postgresql.postgresql_user:
        db: kurtn3x
        name: "{{ api_postgresql_user }}"
        password: "{{ api_postgresql_password }}"
        no_password_changes: true
    - name: Postgresql - Create a new database
      community.postgresql.postgresql_db:
        name: "{{ api_postgresql_database }}"
        owner: "{{ api_postgresql_user }}"
    # these will always show changed maybe fix that later
    - name: Postgresql - change client encoding of postgresql_user
      ansible.builtin.command:
        cmd: psql -c "ALTER ROLE {{ api_postgresql_user }} SET client_encoding TO 'utf8';"
      changed_when: true
    - name: Postgresql - change default_transaction_isolation of postgresql_user
      ansible.builtin.command:
        cmd: psql -c "ALTER ROLE {{ api_postgresql_user }} SET default_transaction_isolation TO 'read committed';"
      changed_when: true
    - name: Postgresql - change timezone of postgresql_user
      ansible.builtin.command:
        cmd: psql -c "ALTER ROLE {{ api_postgresql_user }} SET timezone TO 'UTC';"
      changed_when: true

- name: Reset python interpreter
  ansible.builtin.set_fact:
    ansible_python_interpreter: "{{ web_root }}/{{ api_source.server_dest }}/.venv/bin/python"

- name: Migrate Django DB
  become: true
  become_user: "{{ ansible_web_user }}"
  block:
    - name: Django - make general migrations
      ansible.builtin.command:
        cmd: "{{ ansible_python_interpreter }} {{ web_root }}/{{ api_source.server_dest }}/manage.py makemigrations"
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - make authentication migrations
      ansible.builtin.command:
        cmd: "{{ ansible_python_interpreter }} {{ web_root }}/{{ api_source.server_dest }}/manage.py makemigrations authentication"
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - make user_profile migrations
      ansible.builtin.command:
        cmd: "{{ ansible_python_interpreter }} {{ web_root }}/{{ api_source.server_dest }}/manage.py makemigrations user_profile"
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - make files migrations
      ansible.builtin.command:
        cmd: "{{ ansible_python_interpreter }} {{ web_root }}/{{ api_source.server_dest }}/manage.py makemigrations files"
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - make vpn_torrent migrations
      ansible.builtin.command:
        cmd: "{{ ansible_python_interpreter }} {{ web_root }}/{{ api_source.server_dest }}/manage.py makemigrations vpn_torrent"
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - migrate
      ansible.builtin.command:
        cmd: "{{ ansible_python_interpreter }} {{ web_root }}/{{ api_source.server_dest }}/manage.py migrate"
      register: retval
      changed_when: '"No migrations to apply" not in retval.stdout'
    - name: Django - collect static files
      ansible.builtin.command:
        cmd: "{{ ansible_python_interpreter }} {{ web_root }}/{{ api_source.server_dest }}/manage.py collectstatic --noinput"
      register: retval
      changed_when: '"0 static files copied" not in retval.stdout'

- name: Copy gunicorn socket file
  ansible.builtin.copy:
    src: files/gunicorn.socket
    dest: /etc/systemd/system/gunicorn.socket
    owner: root
    group: root
    mode: '0755'

- name: Generate gunicorn service file
  ansible.builtin.template:
    src: templates/gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn.service
    owner: root
    group: root
    mode: "0755"
