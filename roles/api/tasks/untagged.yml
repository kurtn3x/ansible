---
- name: Install required dependencies
  ansible.builtin.apt:
    update_cache: true
    state: latest
    name:
      - postgresql
      - postgresql-contrib
      - git
      - python3.11
      - python3.11-venv
      - python3-dev
      - libpq-dev
      - curl
      - rsync

- name: Wipe existing database
  become: true
  become_user: postgres
  when: api__redeploy
  block:
    - name: Create temporary venv for postgres commands
      ansible.builtin.pip:
        virtualenv: '/tmp/.venv'
        virtualenv_command: 'python3.11 -m venv'
        name:
          - psycopg2-binary
    - name: Set temporary python interpreter for postgres commands
      ansible.builtin.set_fact:
        ansible_python_interpreter: '/tmp/.venv/bin/python'
    - name: Wipe database
      community.postgresql.postgresql_db:
        name: '{{ api__postgresql_database }}'
        owner: '{{ api__postgresql_user }}'
        state: absent

- name: Wipe api folder
  ansible.builtin.file:
    state: absent
    path: '{{ api__dest }}'
  when: api__redeploy

- name: Create private-media directory
  ansible.builtin.file:
    path: '{{ web__root }}/private-media'
    state: directory
    owner: '{{ ansible_web_user }}'
    group: www-data
    mode: '0750'

- name: Create media directory
  ansible.builtin.file:
    path: '{{ web__root }}/media'
    state: directory
    owner: '{{ ansible_web_user }}'
    group: www-data
    mode: '0755'

- name: Create wireguard psk folder
  ansible.builtin.file:
    path: '{{ api__wireguard_psk_path }}'
    state: directory
    owner: '{{ ansible_web_user }}'
    group: nogroup
    mode: '0700'

- name: Copy api repository
  ansible.posix.synchronize:
    src: '{{ api__source }}/'
    dest: '{{ api__dest }}'
    recursive: true
    archive: true
  delegate_to: localhost
  changed_when: true

- name: Install Python Modules for api
  become: true
  become_user: '{{ ansible_web_user }}'
  ansible.builtin.pip:
    virtualenv: '{{ api__dest }}/.venv'
    virtualenv_command: 'python3.11 -m venv'
    state: latest
    name:
      - django
      - django-axes
      - django-cors-headers
      - django-environ
      - django-ipware
      - djangorestframework
      - gunicorn
      - importlib-metadata
      - pillow
      - pathvalidate
      - psycopg2-binary
      - pytz
      - six
      - sqlparse
      - zipp
      - typing-extensions
      - captcha
      - djangorestframework-camel-case
      - paramiko

- name: Set python interpreter
  ansible.builtin.set_fact:
    ansible_python_interpreter: '{{ api__dest }}/.venv/bin/python'

- name: Get wireguard public-key for django-settings
  ansible.builtin.command: 'cat /etc/wireguard/public.key'
  changed_when: false
  register: pub_key
  failed_when: '"No such file or directory" in pub_key.stdout'
  when: not api__wireguard_public_key
  tags: api_settings

- name: Set wireguard public key variable for django-settings
  ansible.builtin.set_fact:
    public_key: '{{  api__wireguard_public_key if api__wireguard_public_key else pub_key.stdout }}'
  tags: api_settings

- name: Set variables for settings.py
  block:
    - name: Check if public key exists
      ansible.builtin.stat:
        path: /etc/wireguard/client_public.key
      changed_when: false
      when: host_vars['wireguard_middleman'] | default('') != ''
      register: stat_result
      delegate_to: wireguard_middleman

    - name: Get Public-Key
      ansible.builtin.command:
        cmd: cat /etc/wireguard/client_public.key
      when: host_vars['wireguard_middleman'] | default('') != ''
      changed_when: false
      register: c_public_key

    - name: Set facts
      ansible.builtin.set_fact:
        api__wireguard_route_ipv4_network: "{{ host_vars['wireguard_middleman'].wireguard_server__ipv4_network | default('') }}"
        api__wireguard_route_ipv6_network: "{{ host_vars['wireguard_middleman'].wireguard_server__ipv6_network | default('') }}"
        api__wireguard_route_public_key: "{{ c_public_key.stdout | default('') }}"
        api__wireguard_route_endpoint: "{{ host_vars['wireguard_middleman'].ansible_host | default('') }}"
        api__wireguard_route_config_name: "{{ host_vars['wireguard_middleman'].wireguard_server__config_name | default('') }}"

- name: Generate settings.py from template
  ansible.builtin.template:
    src: templates/settings.py.j2
    dest: '{{ api__dest }}/kurtn3x_api/settings.py'
    owner: kurtn3x
    group: nogroup
    mode: '0600'
  tags: api_settings

- name: Generate .env-file from template
  ansible.builtin.template:
    src: templates/.env.j2
    dest: '{{ api__dest }}/kurtn3x_api/.env'
    owner: kurtn3x
    group: nogroup
    mode: '0600'
  tags: api_settings

- name: Postgresql commands
  become: true
  become_user: postgres
  when: api__redeploy
  block:
    - name: Create temporary venv for postgres commands
      ansible.builtin.pip:
        virtualenv: '/tmp/.venv'
        virtualenv_command: 'python3.11 -m venv'
        name:
          - psycopg2-binary
    - name: Set temporary python interpreter for postgres commands
      ansible.builtin.set_fact:
        ansible_python_interpreter: '/tmp/.venv/bin/python'
    - name: Postgresql - Create user
      community.postgresql.postgresql_user:
        name: '{{ api__postgresql_user }}'
        password: '{{ api__postgresql_password }}'
        no_password_changes: true
    - name: Postgresql - Create a new database
      community.postgresql.postgresql_db:
        name: '{{ api__postgresql_database }}'
        owner: '{{ api__postgresql_user }}'
    # these will always show changed maybe fix that later
    - name: Postgresql - change client encoding of postgresql_user
      ansible.builtin.command:
        cmd: psql -c "ALTER ROLE {{ api__postgresql_user }} SET client_encoding TO 'utf8';"
      changed_when: true
    - name: Postgresql - change default_transaction_isolation of postgresql_user
      ansible.builtin.command:
        cmd: psql -c "ALTER ROLE {{ api__postgresql_user }} SET default_transaction_isolation TO 'read committed';"
      changed_when: true
    - name: Postgresql - change timezone of postgresql_user
      ansible.builtin.command:
        cmd: psql -c "ALTER ROLE {{ api__postgresql_user }} SET timezone TO 'UTC';"
      changed_when: true
    - name: Reset python interpreter
      ansible.builtin.set_fact:
        ansible_python_interpreter: '{{ api__dest }}/.venv/bin/python'

- name: Migrate Django DB
  become: true
  become_user: '{{ ansible_web_user }}'
  block:
    - name: Django - make general migrations
      ansible.builtin.command:
        cmd: '{{ ansible_python_interpreter }} {{ api__dest }}/manage.py makemigrations'
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - make authentication migrations
      ansible.builtin.command:
        cmd: '{{ ansible_python_interpreter }} {{ api__dest }}/manage.py makemigrations authentication'
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - make user_profile migrations
      ansible.builtin.command:
        cmd: '{{ ansible_python_interpreter }} {{ api__dest }}/manage.py makemigrations user_profile'
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - make files migrations
      ansible.builtin.command:
        cmd: '{{ ansible_python_interpreter }} {{ api__dest }}/manage.py makemigrations files'
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - make vpn migrations
      ansible.builtin.command:
        cmd: '{{ ansible_python_interpreter }} {{ api__dest }}/manage.py makemigrations vpn'
      register: retval
      changed_when: '"No changes detected" not in retval.stdout'
    - name: Django - migrate
      ansible.builtin.command:
        cmd: '{{ ansible_python_interpreter }} {{ api__dest }}/manage.py migrate'
      register: retval
      changed_when: '"No migrations to apply" not in retval.stdout'
    - name: Django - collect static files
      ansible.builtin.command:
        cmd: '{{ ansible_python_interpreter }} {{ api__dest }}/manage.py collectstatic --noinput'
      register: retval
      changed_when: '"0 static files copied" not in retval.stdout'
    - name: Django - create cache table
      ansible.builtin.command:
        cmd: '{{ ansible_python_interpreter }} {{ api__dest }}/manage.py createcachetable'
      register: retval
      changed_when: '"already exists" not in retval.stdout'

- name: Set general permissions for api folder
  ansible.builtin.file:
    path: '{{ api__dest }}'
    state: directory
    owner: '{{ ansible_web_user }}'
    group: www-data
    mode: u=rwX,g=rX,o=
    recurse: true

- name: Restrict permissions for specific files
  ansible.builtin.file:
    path: '{{ item }}'
    owner: kurtn3x
    group: nogroup
    mode: '0600'
  loop:
    - '{{ api__dest }}/kurtn3x_api/.env'
    - '{{ api__dest }}/kurtn3x_api/settings.py'
  tags: api_settings

- name: Copy gunicorn socket file
  ansible.builtin.copy:
    src: files/gunicorn.socket
    dest: /etc/systemd/system/gunicorn.socket
    owner: root
    group: root
    mode: '0644'

- name: Generate gunicorn service file
  ansible.builtin.template:
    src: templates/gunicorn.service.j2
    dest: /etc/systemd/system/gunicorn.service
    owner: root
    group: root
    mode: '0644'

- name: Copy private key
  ansible.builtin.copy:
    src: files/id_rsa
    dest: '/home/{{ ansible_web_user }}/.ssh/id_rsa'
    mode: '0600'
    owner: '{{ ansible_web_user }}'
    group: '{{ ansible_web_user }}'

- name: Enable and (re-)start gunicorn
  ansible.builtin.systemd_service:
    name: gunicorn
    state: restarted
    enabled: true
