---
- name: Install nginx, certbot, git & ufw
  ansible.builtin.apt:
    update_cache: true
    name:
      - nginx
      - certbot
      - python3-certbot-nginx
      - git
      - ufw

- name: Copy nginx configs
  ansible.builtin.copy:
    src: "files/nginx/{{ item }}"
    dest: "/etc/nginx/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  loop:
    - mime.types
    - nginx.conf

- name: Copy nginx sites
  ansible.builtin.copy:
    src: "files/nginx/sites-available/{{ item }}"
    dest: "/etc/nginx/sites-available/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  loop: "{{ web_nginx_sites }}"

- name: Get copied sites
  ansible.builtin.command: "ls /etc/nginx/sites-available"
  changed_when: false
  register: sites

- name: Create a symbolic links for sites
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ item }}"
    dest: "/etc/nginx/sites-enabled/{{ item }}"
    owner: root
    group: root
    state: link
  loop: "{{ sites.stdout_lines }}"

- name: Run certbot for installed sites
  ansible.builtin.command:
    cmd: "certbot -d {{ item }}  --nginx --non-interactive --agree-tos -m kurtn3x@gmail.com"
  changed_when: true
  loop: "{{ web_nginx_sites }}"

- name: Create www directories
  ansible.builtin.file:
    path: "{{ web_root }}/{{ item.server_dest }}"
    state: directory
    owner: "{{ ansible_web_user }}"
    group: "www-data"
    mode: u=rwX,g=rX,o=rX
  loop: "{{ web_sources }}"

- name: Clone git repositories locally
  ansible.builtin.git:
    repo: "{{ item.source }}"
    dest: "tmp/{{ item.dest }}"
    version: main
  loop: "{{ web_sources }}"
  when: item.enabled
  delegate_to: localhost

- name: Install npm dependencies locally
  ansible.builtin.command: npm install
  args:
    chdir: "tmp/{{ item.dest }}"
  changed_when: true
  loop: "{{ web_sources }}"
  when: item.quasar_build and item.enabled
  delegate_to: localhost
  register: result

- name: Build quasar repositories locally
  ansible.builtin.command: quasar build
  args:
    chdir: "tmp/{{ item.dest }}"
  changed_when: true
  loop: "{{ web_sources }}"
  when: item.quasar_build and item.enabled
  delegate_to: localhost
  register: result

- name: Copy quasar sources
  ansible.builtin.copy:
    src: "tmp/{{ item.dest }}/dist/spa/"
    dest: "{{ web_root }}/{{ item.server_dest }}/."
    owner: "{{ ansible_web_user }}"
    group: www-data
    mode: u=rwX,g=rX,o=rX
  loop: "{{ web_sources }}"
  when: item.quasar_build and item.enabled

- name: Copy non-quasar sources
  ansible.builtin.copy:
    src: "tmp/{{ item.dest }}/"
    dest: "{{ web_root }}/{{ item.server_dest }}"
    owner: "{{ ansible_web_user }}"
    group: www-data
    mode: u=rwX,g=rX,o=rX
  loop: "{{ web_sources }}"
  when: not item.quasar_build and item.enabled

- name: Copy favicon
  ansible.builtin.copy:
    src: "files/statics/"
    dest: "{{ web_root }}/{{ item.server_dest }}/statics/."
    owner: "{{ ansible_web_user }}"
    group: www-data
    mode: u=rwX,g=rX,o=rX
  loop: "{{ web_sources }}"

- name: Enable and start nginx
  ansible.builtin.systemd_service:
    name: nginx
    state: restarted
    enabled: true

- name: Set Firewall rules
  block:
    - name: Allow ssh (22), http (80) & https (443)
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - 22
        - 80
        - 443

    - name: Enable Firewall and block traffic by default
      community.general.ufw:
        default: reject
        state: enabled

    - name: Enable and start ufw
      ansible.builtin.service:
        name: ufw
        state: restarted
        enabled: true
