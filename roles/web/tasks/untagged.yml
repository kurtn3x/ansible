---
- name: Install nginx, certbot, git & ufw
  ansible.builtin.apt:
    update_cache: true
    state: latest
    name:
      - nginx
      - certbot
      - python3-certbot-nginx
      - git
      - ufw

- name: Copy nginx configs
  ansible.builtin.copy:
    src: 'files/nginx/{{ item }}'
    dest: '/etc/nginx/{{ item }}'
    owner: root
    group: root
    mode: '0644'
  loop:
    - mime.types
    - nginx.conf

- name: Get local nginx configs
  ansible.builtin.find:
    paths: '{{ role_path }}/files/nginx/sites-available'
  delegate_to: localhost
  register: local_nginx_configs

- name: Get remote nginx configs
  ansible.builtin.find:
    paths: '/etc/nginx/sites-available'
  register: remote_nginx_configs

- name: Copy nginx sites
  ansible.builtin.copy:
    src: '{{ item.path }}'
    dest: '/etc/nginx/sites-available/{{ item.path | basename }}'
    owner: root
    group: root
    mode: '0644'
  loop: '{{ local_nginx_configs.files }}'
  loop_control:
    label: '{{ item.path | basename }}'
  when: "item.path | basename not in remote_nginx_configs.files | map(attribute='path') | map('basename')"

- name: Create a symbolic links for sites
  ansible.builtin.file:
    src: '/etc/nginx/sites-available/{{ item.path | basename }}'
    dest: '/etc/nginx/sites-enabled/{{ item.path | basename }}'
    owner: root
    group: root
    state: link
  loop: '{{ local_nginx_configs.files }}'

- name: Run certbot for installed sites
  ansible.builtin.command:
    cmd: 'certbot -d {{ item.path | basename }} --nginx --non-interactive --agree-tos -m kurtn3x@gmail.com'
  changed_when: true
  loop: '{{ local_nginx_configs.files }}'
  when: "item.path | basename not in remote_nginx_configs.files | map(attribute='path') | map('basename')"

- name: Create www directories
  ansible.builtin.file:
    path: '{{ web__root }}/{{ item.dest }}'
    state: directory
    owner: '{{ ansible_web_user }}'
    group: 'www-data'
    mode: u=rwX,g=rX,o=rX
  loop: '{{ web__quasar_sources }}'
  loop_control:
    label: 'Create {{ web__root }}/{{ item.dest }}'

- name: Build quasar projects locally
  ansible.builtin.command: quasar build
  args:
    chdir: '{{ item.source }}'
  changed_when: true
  loop: '{{ web__quasar_sources }}'
  loop_control:
    label: 'Build {{ item.source }}'
  when: item.quasar_build and item.enabled
  delegate_to: localhost
  register: result

- name: Copy quasar sources
  ansible.posix.synchronize:
    src: '{{ item.source }}/dist/spa/'
    dest: '{{ web__root }}/{{ item.dest }}/.'
  loop: '{{ web__quasar_sources }}'
  loop_control:
    label: 'Copy {{ item.source }}'
  when: item.quasar_build and item.enabled
  become: true
  become_user: '{{ ansible_web_user }}'
  tags:
    - web_sync

- name: Copy favicon
  ansible.builtin.copy:
    src: 'files/statics/'
    dest: '{{ web__root }}/{{ item.dest }}/statics/.'
    owner: '{{ ansible_web_user }}'
    group: www-data
    mode: u=rwX,g=rX,o=rX
  loop: '{{ web__quasar_sources }}'
  tags:
    - web_sync

- name: Enable and start nginx
  ansible.builtin.systemd_service:
    name: nginx
    state: restarted
    enabled: true

- name: Set Firewall rules
  block:
    - name: Allow ssh (22), http (80) & https (443)
      community.general.ufw:
        rule: allow
        port: '{{ item }}'
      loop:
        - 22
        - 80
        - 443

    - name: Enable Firewall and block traffic by default
      community.general.ufw:
        default: reject
        state: enabled

    - name: Enable and start ufw
      ansible.builtin.service:
        name: ufw
        state: restarted
        enabled: true
